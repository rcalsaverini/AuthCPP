#!/usr/bin/python

import multiprocessing
from multiprocessing import Process, Queue
from time import sleep, time
from random import uniform
import os
from numpy import arange
import re

showList = lambda x : " ".join(map(str,x))

def doCalculation(par):
    u,beta,size   = par
    q = 0
    steps = 400000
    burn  = 30000
    alpha = size * (size - 1.0)/2.0 * u
    cmd  = "./authcpp " + " ".join(map(str,[size, steps, burn, beta, alpha, q]))
    foo = os.popen(cmd)
    output = "".join([line[0:-1] for line in foo])
    res = re.findall("\d+\.\d+|\d+", output)
    return map(float,res)


if __name__ == "__foo__":
    par = (0.0, 15, 10)
    umove = lambda (x,y) : (x + 0.025, y)
    bmove = lambda (x,y) : (x, y - 0.1)
    showList = lambda x : " ".join(map(str,x))
    u,beta = par
    while u < 2.0:
        foo = doCalculation(par)
        print u, beta, showList(foo)
        par = umove(par)
        u,beta = par



def transitionLine(beta, size, ulo, optimize = False):
    uhi = ulo
    res = float(size - 1)
    reslo = doCalculation((ulo,beta,size))
    k = 0
    while (res/float(size -1) == 1):
         ulo = uhi
         uhi += 0.001
         reshi = doCalculation((uhi,beta,size))
         res = reshi[0]
         k+=1
         #print ulo, uhi, res
    umid = (ulo + uhi)/2.0
    eps = 0.0
    while ((uhi - ulo > 1e-5) & (k > 10) & optimize):
        umid = (ulo + uhi)/2.0
        resmid = doCalculation((uhi,beta,size))
        if (abs(size - 1 - resmid[0]) <= eps):
            ulo = umid
        else:
            uhi = umid
    return ulo, umid, uhi #, showList(reslo)
        
if __name__== "__main__":
    T = 0.2
    size = 4
    uloi = 0.0
    beta = 1/T
    while(T>=0):
        t = time()
        ulo, umid, uhi = transitionLine(beta, size, uloi, optimize = True)
        print T, umid, time() - t
        T -= 0.001
        beta = 1/T
        uloi = ulo*0.99

        
        

if __name__ == "__msafain__":
    beta = 5
    size = 5
    while (beta > 0):
        u = 1.10
        par = (u,beta,size)
        foo = doCalculation(par)
        while (foo[0] < 3.99):
            u = u +  0.2
            par = (u,beta,size)
            foo = doCalculation(par)
            print u,beta, " ".join(map(str,foo))
        print beta, u 
        beta -= 0.5
            
