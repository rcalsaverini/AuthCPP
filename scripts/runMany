#!/usr/bin/python

import os
import multiprocessing
from multiprocessing import Process, Queue, Lock, Value
from time import time, sleep
from numpy import arange, mean
from Queue import Empty
import os.path as p

showList = lambda x : " ".join(map(str,x))

def doCalculation(alpha, q, beta, size, steps, burn, annealing, lone):
    cmd  = "./authcpp " + " ".join(map(str,[size, steps, burn, annealing, beta, alpha, q, lone]))
    foo = os.popen(cmd)
    output = "".join([line[0:-1] for line in foo])
    res = output.split()
    return map(float, res), output 

def cabecalho(fh, beta, q, size, steps, burn, annealing):
    print >>fh, "# cut: vary alpha"
    print >>fh, "# q: " , q
    print >>fh, "# beta: " , beta
    print >>fh, "# size: "  , size
    print >>fh, "# steps: " , steps
    print >>fh, "# burn: "  , burn
    print >>fh, "# anneal: ", annealing

def varyQ((u0, u1, du), beta, q, size,  steps, burn, anneal, lone, fname):
    out = []
    fhandle = open(fname, "w")
    u = u0
    cabecalho(fhandle, beta, q, size, steps, burn, anneal)
    while (u < u1):
        alpha = u * size * (size - 1)/2.0
        res, output = doCalculation(alpha, q, beta, size, steps, burn, anneal, lone)
        print >>fhandle, alpha, q, showList(res)
        u = u + du
    fhandle.close()

def runManyQ(queue, pars, maxk, t1, tinit, cnt):
    while True:
        try:
            cnt.value = cnt.value + 1
            size, beta, steps, burn, anneal, maxedges = pars
	    k,q = queue.get(block = False)
            fname = "./fooQ2/cutQ_alpha" + str(k)
            print "Running %d - %d of %d ..."%(k, cnt.value,maxk)
	    t0 = time()
            varyQ((0.2, 1.5, 0.1), beta, q, size, steps, burn, anneal, 0, fname)
            t0 = time() - t0
            # Progresso:
            t1.value = t1.value + t0
            tmedio = t1.value / float(cnt.value)
            eta    = tmedio * (1+maxk - cnt.value)
            print "Done! time: %f, tmedio: %f, ETA: %f, Elapsed: %f"%(t0, tmedio, eta, time() - tinit.value)
        except Empty:
            print "THE END"
            break
def mainQ():
    nthreads = multiprocessing.cpu_count()
    queue = Queue()
    size   = 15
    steps  = 2000000
    burn   = 1000000
    anneal = 100000
    maxedges = size * (size - 1)/2
    beta   = 7
    pars   = (size, beta, steps, burn, anneal, maxedges)
    dq = 0.01/7.0
    uset   = [x for x in arange(0, 0.01+dq,dq)] #arange(0.2, 1.8, 0.2) 
    alphas = [(k+1,u) for (k,u) in enumerate(uset)]
    maxk = len(uset)
    for alpha in alphas:
        queue.put(alpha)
    t1  = Value('d', 0.0)
    cnt = Value('i', 0)
    t0  = Value('d', time())
    #sleep(10)
    procs = [Process(target = runManyQ, args = (queue, pars,maxk, t1, t0, cnt)) for i in xrange(nthreads)]
    for p in procs:
        p.start()
    for p in procs:
        p.join()



if __name__ == "__main__":
    mainQ()
